/*
  Charlton Trezevant
  CGS 3763 - Euripides Montagne
  Homework #2 Concurrency and I/O Subsystem
 */
semaphore Full, Full2, Full3, Mutex, Mutex2, Mutex3;
semaphore IOREQ, ReqServiced, ReqPending, PhysicalIO, OpComplete;
semaphore stdout, QuerySyscalls;

int UID, BID, BADDR, DADDR;
int numSyscalls = 5;
int numSyscallsCompleted = 0;

const int bufferSize = 1;
int IORQ_id[bufferSize];
int IORQ_address[bufferSize];

void busy(int x) {
    for (; x > 0; x--); // busy wait for x iterations
}

int all_syscalls_sent() {
    int completed;

    p(QuerySyscalls);
    completed = numSyscallsCompleted;
    v(QuerySyscalls);

    if (completed >= numSyscalls)
        return 1;
    else
        return 0;
}


void user() {
    int i = 0, addr;
    numSyscallsCompleted = 0;
    for (i = 0; i < numSyscalls; i++) {
        UID = 1;
        addr = random(50);
        p(Full);
        p(Mutex);
        BID = UID;
        BADDR = addr;
        p(stdout);
        cout << "User " << UID << " executed a system call to read from address " << addr << "!" << endl;
        v(stdout);
        v(Mutex);
        v(IOREQ);
        p(ReqServiced);
    }

    p(stdout);
    cout << "user: all syscalls initiated, terminating... " << endl;
    v(stdout);
}

void DOIO() {
    int k = 0;
    int TID, TADDR;
    while (1 == 1) {
        if (all_syscalls_sent() == 1)
            break;
            
        p(IOREQ);

        p(Mutex);

        TID = BID;
        TADDR = BADDR;
        v(Mutex);
        v(Full);

        p(Full2);

        p(Mutex2);

        IORQ_id[k] = TID;
        IORQ_address[k] = TADDR;

        if (k >= bufferSize - 1)
            k = 0;
        else
            k++;

        p(stdout);
        cout << "DOIO: an IO Request Block was assembled for the UID " <<
            TID << " and placed in the IO Request Queue" << endl;
        v(stdout);

        v(Mutex2);
        v(ReqPending);
    }

    p(stdout);
    cout << "DOIO: all syscalls complete, terminating... " << endl;
    v(stdout);
}


void driver() {
    int i = 0, m = 0, DID, T2ADDR;
    while (1 == 1) {
        if (all_syscalls_sent() == 1)
            break;

        p(ReqPending);
        p(Mutex2);
        DID = IORQ_id[m];
        T2ADDR = IORQ_address[m];

        if (m >= bufferSize - 1)
            m = 0;
        else
            m++;

        v(Mutex2);
        v(Full2);

        p(Full3);

        p(Mutex3);
        DADDR = T2ADDR;
        v(Mutex3);

        v(PhysicalIO);

        p(stdout);
        cout << "DRIVER: initiated I/O op for UID " << UID << endl;
        v(stdout);

        p(OpComplete);
        v(ReqServiced);

        p(stdout);
        cout << "Signal FROM driver TO user " << UID << ": request served" << endl;
        v(stdout);
    }

    p(stdout);
    cout << "driver: all syscalls complete, terminating... " << endl;
    v(stdout);
}

void disk() {
    int i = 0, diskaddr;
    while (1 == 1) {
       if (all_syscalls_sent() == 1)
          break;

        p(PhysicalIO);

        p(Mutex3);
        diskaddr = DADDR;
        v(Mutex3);

        v(Full3);

        busy(diskaddr + 1000); // loop 1-diskaddr, diskaddr increased for longer wait

        p(stdout);
        cout << "Signal FROM disk TO driver: read operation for address " << diskaddr << " complete!" << endl;
        v(stdout);

        v(OpComplete);
        
        p(QuerySyscalls);
        numSyscallsCompleted++;
        v(QuerySyscalls);
    }

    p(stdout);
    cout << "disk: all syscalls complete, terminating... " << endl;
    v(stdout);
}

main() {
    initialsem(Full, 1);
    initialsem(Full2, 1);
    initialsem(Full3, 1);
    initialsem(Mutex, 1);
    initialsem(Mutex2, 1);
    initialsem(Mutex3, 1);
    initialsem(IOREQ, 0);
    initialsem(ReqServiced, 0);
    initialsem(ReqPending, 0);
    initialsem(PhysicalIO, 0);
    initialsem(OpComplete, 0);
    initialsem(stdout, 1);
    initialsem(QuerySyscalls, 1);

    cobegin {
      disk();
      driver();
      DOIO();
      user();
    }
}
